/** Maze Display | Marko Sterbentz 4/19/2015
 *  This is the form display for Exercise 6.
 */
import javax.swing.JOptionPane;
import java.io.*;
public class MazeDisplay extends javax.swing.JFrame {

    Maze maze;
    
    /**
     * Creates new form MazeDisplay
     */
    public MazeDisplay() {
        initComponents();
        StdDraw.setCanvasSize();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCreateMaze = new javax.swing.JButton();
        btnTraverseMaze = new javax.swing.JButton();
        btnCreateMinimalMaze = new javax.swing.JButton();
        btnTraverseTwoPoints = new javax.swing.JButton();
        txtRows = new javax.swing.JTextField();
        lblX = new javax.swing.JLabel();
        txtColumns = new javax.swing.JTextField();
        lblTraversals = new javax.swing.JLabel();
        lblCreateMaze = new javax.swing.JLabel();
        btnSimulation = new javax.swing.JButton();
        lblSimulation = new javax.swing.JLabel();
        lblWarning = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCreateMaze.setText("Create Connected Maze");
        btnCreateMaze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateMazeActionPerformed(evt);
            }
        });

        btnTraverseMaze.setText("Traverse Start to End");
        btnTraverseMaze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraverseMazeActionPerformed(evt);
            }
        });

        btnCreateMinimalMaze.setText("Create Minimal Maze");
        btnCreateMinimalMaze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateMinimalMazeActionPerformed(evt);
            }
        });

        btnTraverseTwoPoints.setText("Traverse Between Points");
        btnTraverseTwoPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraverseTwoPointsActionPerformed(evt);
            }
        });

        lblX.setText("x");

        lblTraversals.setText("Traversals:");

        lblCreateMaze.setText("Create Maze:");

        btnSimulation.setText("Run Simulation");
        btnSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimulationActionPerformed(evt);
            }
        });

        lblSimulation.setText("Simulation:");

        lblWarning.setText("Warning: This takes time...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnTraverseMaze, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCreateMinimalMaze, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCreateMaze, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnTraverseTwoPoints, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtRows, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblX)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtColumns))
                                .addComponent(lblTraversals)
                                .addComponent(lblCreateMaze))
                            .addComponent(lblSimulation)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblWarning)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCreateMaze)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblX)
                    .addComponent(txtColumns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreateMaze)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreateMinimalMaze)
                .addGap(19, 19, 19)
                .addComponent(lblTraversals)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTraverseMaze)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTraverseTwoPoints)
                .addGap(26, 26, 26)
                .addComponent(lblSimulation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblWarning)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSimulation)
                .addContainerGap(230, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Create Maze Button Click | Marko Sterbentz 4/19/2015
     *  When clicked, this button will create and display a new, randomly generated maze.
     */
    private void btnCreateMazeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateMazeActionPerformed
        try
        {
            // create the maze
            maze = new Maze(Integer.parseInt(txtRows.getText()), Integer.parseInt(txtColumns.getText()));
            maze.generateConnectedMaze();
            // display the maze
            StdDraw.setCanvasSize();
            StdDraw.loadInMaze(maze);
            StdDraw.getFrame().setVisible(true);
            StdDraw.clear();
            StdDraw.drawMaze();
            //StdDraw.drawLabels(); 
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Please enter appropriate row and column values.","Invalid Input",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateMazeActionPerformed

    /** Traverse Maze Button Click | Marko Sterbentz 4/19/2015
     *  When clicked, this button will traverse the maze from start to finish.
     */
    private void btnTraverseMazeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTraverseMazeActionPerformed
        try
        {
            StdDraw.clearPath();
            maze.traverseMaze(maze.getCells()[0][0], maze.getCells()[maze.getCells().length - 1][maze.getCells()[maze.getCells().length - 1].length - 1], true);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Error occurred when trying to traverse from start to finish.","Error When Traversing",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnTraverseMazeActionPerformed

    /** Create Minimal Maze Button Click | Marko Sterbentz 4/20/2015
     *  When clicked, this button will create the minimal path maze.
     */
    private void btnCreateMinimalMazeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateMinimalMazeActionPerformed
        try
        {
            // create the maze
            maze = new Maze(Integer.parseInt(txtRows.getText()), Integer.parseInt(txtColumns.getText()));
            maze.generateMinimalMaze();
            // display the maze
            StdDraw.setCanvasSize();
            StdDraw.loadInMaze(maze);
            StdDraw.getFrame().setVisible(true);
            StdDraw.clear();
            StdDraw.drawMaze();
            StdDraw.drawLabels();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Please enter appropriate row and column values.","Invalid Input",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateMinimalMazeActionPerformed

    /** Traverse Two Points Button Click | Marko Sterbentz 4/20/2015
     *  When clicked, this button will find and draw a path between the two points
     *  selected by the user.
     */
    private void btnTraverseTwoPointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTraverseTwoPointsActionPerformed
        try
        {
            StdDraw.clearPath();
            maze.traverseMaze(StdDraw.getSelectedCells().get(0), StdDraw.getSelectedCells().get(1), true);
        }
        catch(IndexOutOfBoundsException e)
        {
            JOptionPane.showMessageDialog(null,"Please specify a second point to traverse to.","Need Another Point",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnTraverseTwoPointsActionPerformed

    /** Simulation Button Click | Marko Sterbentz 4/21/2015
     *  Clicking this button will run the Monte-Carlo simulation and write out the results
     *  to a text file called "runtimeDistributions.txt".
     *  Note: This simulation solves 1000 100x120 mazes.
     *  Note: It takes a while to finish.
     */
    private void btnSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimulationActionPerformed

        long tempTime;
        double[] times = new double[8];
        int numberOfRuns = 1000;
        int[] runtimes = new int[numberOfRuns]; // this keeps track of the duration of each run
        // don't record the first 10 runs, as there are skewed results in there
        for(int i = 0; i < 10; i++)
        {
            maze = new Maze(100, 120);
            maze.generateConnectedMaze();
            tempTime = maze.traverseMaze(maze.getCells()[0][0], maze.getCells()[maze.getCells().length - 1][maze.getCells()[maze.getCells().length - 1].length - 1], false);
        }
        
        for(int i = 0; i < numberOfRuns; i++)
        {
            maze = new Maze(100, 120);   
            maze.generateConnectedMaze();
            tempTime = maze.traverseMaze(maze.getCells()[0][0], maze.getCells()[maze.getCells().length - 1][maze.getCells()[maze.getCells().length - 1].length - 1], false);
            runtimes[i] = (int) tempTime;
            if(tempTime <= 100)
                times[0]++;
            else if(tempTime <= 200)
                times[1]++;
            else if(tempTime <= 300)
                times[2]++;
            else if(tempTime <= 400)
                times[3]++;
            else if(tempTime <= 500)
                times[4]++;
            else if(tempTime <= 600)
                times[5]++;
            else if(tempTime <= 700)
                times[6]++;           
            else
                times[7]++;
        }
        
        // begin writing out times to text file
        try
        {
            File file  = new File("./runtimeDistributions.txt");
            if(!file.exists())
                file.createNewFile();
            
            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            for(int i = 0; i < times.length; i++)
                bw.write(Double.toString(times[i]) + ", ");
            bw.close();                                 
        }
        catch(IOException e)
        {
            e.printStackTrace();
        }
        
        // draw the histogram of the run data
        int N = (int) StdStats.max(runtimes);   // number of possible runtime values
        int T = numberOfRuns;   // number of runs

        // create the histogram
        Histogram histogram = new Histogram(N+1); 
        for (int t = 0; t < T; t++) {
            histogram.addDataPoint((int)runtimes[t]);
        }

        // display using standard draw
        StdDraw.setCanvasSize(500, 100);
        histogram.draw();       
    }//GEN-LAST:event_btnSimulationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MazeDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MazeDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MazeDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MazeDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MazeDisplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateMaze;
    private javax.swing.JButton btnCreateMinimalMaze;
    private javax.swing.JButton btnSimulation;
    private javax.swing.JButton btnTraverseMaze;
    private javax.swing.JButton btnTraverseTwoPoints;
    private javax.swing.JLabel lblCreateMaze;
    private javax.swing.JLabel lblSimulation;
    private javax.swing.JLabel lblTraversals;
    private javax.swing.JLabel lblWarning;
    private javax.swing.JLabel lblX;
    private javax.swing.JTextField txtColumns;
    private javax.swing.JTextField txtRows;
    // End of variables declaration//GEN-END:variables
}
